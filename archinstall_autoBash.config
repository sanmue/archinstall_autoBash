#!/usr/bin/env bash

# ----------------------------------------------------------------
# Name                 archinstall_autoBash.config
# Description          config (bash variables) used by the shell scripts
# Author               Sandro Müller (sandro(ÄT)universalaccount.de)
# Licence              GPLv3
# ----------------------------------------------------------------

# ------------------
# Config / Variables
# ------------------

# --- Specify the config variables according to your needs:
initialPassword='Start1234'         # for all users in 'arrUserId' and root # Change here now (optional) and later after install+reboot / at next login; change forced when forceChangePassword="true"
forceChangePassword="true"          # "true" or "false" # forcing to change password at next login
arrUserId=("sandro" "r2d2" "data")  # specify UserID(s) of the account(s) to be created (more than 1: space separated list)
arrSudoUser=("sandro")              # specify users who will have sudo privilege to execute any command (more than 1: space separated list)

consoleKeyboardLayout="de-latin1"   # console keyboard layout:  temporary for current session + permanent (>> /etc/vconsole.conf)   # ls /usr/share/kbd/keymaps/**/*.map.gz
terminalFont="ter-122b"             # terminal font (temporary for current session)   # ls /usr/share/kbd/consolefonts/ | grep ter | less
timezone="Europe/Berlin"            # timezone   # timedatectl list-timezones # ls /usr/share/zoneinfo

partitionDisk="true"                # "true" or "false" # if the disk should be partitioned # only simple partitioning supported: https://wiki.archlinux.org/title/Partitioning#Example_layouts 
                                    # set value to "false" if disk is already partitioned (perhaps with a more complex setup)
formatPartition="true"              # "true" or "false" # if Partitions should be formatted
                                    # set value to "false" if disk is already partitioned an formated (perhaps with a more complex setup); set according to variable 'partitionDisk'
eraseDisk="false"                   # "true" or "false" # erase complete disk with random bytes via 'dd'-command (could take some time)
mountPartition="true"               # "true" or "false" # if the partitions generated by the script should be mounted   # set according to variable 'formatPartition' or if your layout matches the layout-example
blockSize="512"                     # default: 512 (bytes) # blocksize parameter for dd command; if eraseDisk="true"
deviceName="vda"                    # device name (eg. vda, sda, nvme0n1, ...); ! NOT a partition, e.g. vda1 !   # lsblk | grep --extended-regexp --invert-match 'rom|loop|airoot'
#deviceType="ssd"                   # currentyly just checking if btrfs when creating btrfs subvolumes # "ssd" or s.th. else (e.g. "hd", "xxx") # if filesystemType="btrfs" + "ssd": other mount-options in fstab; else: standard
bootMode="Bios"                     # "Bios" or "Uefi" (!starting capital letter!) # boot mode   # check the UEFI bitness: cat /sys/firmware/efi/fw_platform_size
partitionType="gpt"                 # "gpt" (Bios or Uefi boot mode) or "mbr" (only Bios boot mode) # Partition type
efiPartitionSize="1500"             # size in MB # only for UEFI boot mode: specify size of EFI-Partition in MB; should be min. 300 MB
swapPartitionSize="2000"            # size in MB # specify the size of the swap partition
filesystemType="btrfs"              # e.g. "btrfs", "ext4",... # filesystem type for root partition (and home partition)   # man mkfs.<filesystemType>
snapperSnapshot="true"              # only available if filesystemType="btrfs": install snapper and create snapper config for subvolume mounted at '/'
bootloader="grub"                   # "grub" # only GRUB supported at the moment; prefered e.g. for btrfs + snapper: booting into snashot selecten in GRUB boot menu

cpuManufacturer="XXX"               # "amd" or "intel"; others: specify manually in variable strListCpuPgk further below

# grafics not testet - check and correct manually further below
graficsCardInstalled="false"        # "true" or "false" # if you have installed a Grafics Card, set value to "true"; set to "false" if not or if you want to do it later yourself
graficsCardManufacturer="XXX"       # "amd" or "nvidia" or "intel"; for others: you must manually set varialbe "strListGraficsCardPkg" further below 

arrLocalegen=("en_US.UTF-8 UTF-8" "de_DE.UTF-8 UTF-8" "de_DE ISO-8859-1" "de_DE@euro ISO-8859-15")   # /etc/locale.gen # one or more locales to be uncommented in /etc/locale.gen
defaultLang="en_US.UTF-8 UTF-8"     # default language
defaultLangPreferred="en_US.UTF-8"  # preferred default language -> /etc/locale.conf   # localectl list-keymaps

myHostname="archmachine"            # specify hostname for the machine
myDomain="home.arpa"                # specify domain

strListNetworkPkg="networkmanager network-manager-applet wpa_supplicant"   # see also config variable 'strListPacstrapPackage' already includes networkmanager # Packages for network 
strListAdditionalPkg="acpi acpid acpi_call alsa-utils avahi bash-completion bluez bluez-utils dialog dnsutils dosfstools dnsmasq flatpak git gvfs gvfs-smb inetutils ipset mtools nfs-utils nss-mdns ntp openbsd-netcat openssh os-prober pulseaudio rsync terminus-font vde2 xdg-user-dirs xdg-utils"
if [ "${filesystemType}" = "btrfs" ] && [ "${snapperSnapshot}" = "true" ]; then strListAdditionalPkg+=" snapper snap-pac inotify-tools"; fi
if [ "${filesystemType}" = "btrfs" ] && [ "${snapperSnapshot}" = "true" ] && [ "${bootloader}" = "grub" ]; then strListAdditionalPkg+=" grub-btrfs"; fi
strListAdditionalPkg_print="cups hplip"           # Printing support
strListAdditionalPkg_firewall="firewalld"         # "firewalld" # Firewall (ufw, ... not supported by the script yet)
#strListAdditionalPkg_PowerMgmt="tlp"             # Linux Advanced Power Management # not needed if installing a desktop environment or a virtual machine (VM)
strListAdditionalPkg_conflicting="iptables-nft"   # iptables-nft (or iptables) needed for VM # iptables-nft and iptables (installed) are in conflict. Script Will confirm to remove iptables.
virtualization="false"                            # "true" or "false" # if virtualization should be installed (TODO: ... and configured)
strListAdditionalPkg_VM="qemu-full virt-manager virt-viewer bridge-utils dnsmasq dmidecode ebtables edk2-ovmf iptables-nft libguestfs libvirt openbsd-netcat swtpm vde2 virt-install" # virtualization # iptables-nft should already be installed

# Services to enable:
arrService=("acpid" "bluetooth" "cups.service" "enable avahi-daemon" "fstrim.timer" "lvm2-monitor.service" "NetworkManager" "reflector.timer" "sshd" "systemd-timesyncd.service")
if [ "${strListAdditionalPkg_firewall}" = "firewalld" ]; then arrService+=("firewalld"); fi
if [ "${virtualization}" = "true" ]; then arrService+=("libvirtd"); fi
# "snapper-timeline.timer" for creating timeline snapshots; but I prefer package 'snap-pac' only an no timeline snapshots
if [ "${filesystemType}" = "btrfs" ] && [ "${snapperSnapshot}" = "true" ]; then arrService+=("snapper-boot.timer"); fi   # Snapshots on boot for root configuration
if [ "${filesystemType}" = "btrfs" ] && [ "${snapperSnapshot}" = "true" ] && [ "${bootloader}" = "grub" ]; then arrService+=("grub-btrfsd.service"); fi   # Regenerate grub-btrfs.cfg
if [ "${filesystemType}" = "btrfs" ] && [ "${snapperSnapshot}" = "true" ]; then arrService+=("snapper-cleanup.timer"); fi

#arrService+=("tlp")                              #TODO: query if corresponding variable 'strListAdditionalPkg_PowerMgmt' is set -> enable

# Check timesync settings / ntp:
# - timedatectl show-timesync --all
# - timedatectl set-ntp true   # Not necessary, especially if 'systemctl enable systemd-timesyncd.service' used / works

installDesktopEnvironment="true"    # "true" or "false"
desktopEnvironmentName="Gnome"      # "Gnome" # Only Gnome supported by now
strListBasePkg_Gnome="xorg gdm gnome gnome-tweaks arc-gtk-theme arc-icon-theme" # add 'gnome-extra' if needed # base packages to install for Gnome
strListDesktopEnvPgk="firefox vlc"  # additional packes to install when installing a desktop envireonment
strListFontPkg="ttf-bitstream-vera ttf-croscore ttf-dejavu ttf-droid gnu-free-fonts ttf-ibm-plex ttf-liberation ttf-linux-libertine noto-fonts ttf-roboto tex-gyre-fonts ttf-ubuntu-font-family ttf-anonymous-pro ttf-cascadia-code ttf-fantasque-sans-mono ttf-fira-mono ttf-hack ttf-fira-code ttf-inconsolata ttf-jetbrains-mono ttf-monofur adobe-source-code-pro-fonts cantarell-fonts inter-font ttf-opensans gentium-plus-font ttf-junicode adobe-source-han-sans-otc-fonts adobe-source-han-serif-otc-fonts noto-fonts-cjk noto-fonts-emoji"
installFont="true"                 # if the additional fonts from 'strListFontPkg' shall be installed

# ------------------------------------
# --- Do not change until you are sure
device="/dev/${deviceName}"         # disk to be formated, e.g. /dev/vda (NOT a partition like /dev/vda1)
partitionLabelRoot="root"           # label for root partition
partitionLabelHome="home"           # label for home partition
partitionLabelEfi="EFI"             # label for EFI partition
fileSystemTypeEfi="fat"             # file system type for efi partition
fatSize="32"                        # or "12","16","32" # type of file allocation tables used for FAT-Filesystem (Uefi: format option for efi-partition)   # man mkfs.fat
mountOptionDefault=""               # Standard mount option; empty: let mount command go for it 
mountOptionDefaultInit=""
mountOptionBtrfs="defaults,noatime,discard=async,compress=zstd,space_cache=v2" # mountOptionBtrfs="defaults,noatime,compress=zstd,space_cache=v2"  # mount options if formatted with btrfs filesystem
mountOptionBtrfsInit="rw,noatime,discard=async,compress=zstd,space_cache=v2"
initialLsblk=$(lsblk --noheadings | grep --extended-regexp --invert-match 'rom|loop|airoot')      # list of available block devices at script start, except for type 'rom' or 'loop' or 'airoot'
efiPartitionNo=0                    # correct value will be set in function 'format-partition'    # Partition number, eg. "1" for /dev/vda1, "2" for /dev/vda2, ...
swapPartitionNo=0                   # correct value will be set in function 'format-partition'    # Partition number, eg. "1" for /dev/vda1, "2" for /dev/vda2, ...
rootPartitionNo=0                   # correct value will be set in function 'format-partition'    # Partition number, eg. "1" for /dev/vda1, "2" for /dev/vda2, ...
pathEfi="/efi"                      # "efi" or "/boot/efi"; path with startintg '/' # /boot/efi is deprecated # option for grub-install (Uefi)
pathGrubCfg="/boot/grub/grub.cfg"   # path with startintg '/' # path to grub config file
bootloaderId="GRUB"                 # or "archlinux", ... whatever you like # bootloader ID

snapperSnapshotFolder="/.snapshots" # "/.snapshots" DO NOT CHANGE # folder for snapper snapshots

# https://cgit.freedesktop.org/systemd/systemd/commit/?id=113b3fc1a8061f4a24dd0db74e9a3cd0083b2251:
#   - subvolumes "var/lib/portables" + "var/lib/machines"
declare -A btrfsSubvolLayout=(  ["@"]="/" 
                                ["@snapshots"]="${snapperSnapshotFolder}" 
                                ["@home"]="/home" 
                                ["@opt"]="/opt" 
                                ["@srv"]="/srv" 
                                ["@tmp"]="/tmp" 
                                ["@usrlocal"]="/usr/local"
                                ["@varcache"]="/var/cache" 
                                ["@varlog"]="/var/log" 
                                ["@varopt"]="/var/opt" 
                                ["@varspool"]="/var/spool" 
                                ["@vartmp"]="/var/tmp" 
                                ["@libvirtimages"]="/var/lib/libvirt/images" 
                                )
rootSubvolumeName="@"   # "@" # will be overwritten by function 'get-rootSubvolumeName'

snapperConfigName_root="root"       # name of the snapper config for subvolume mounted at '/'
declare -A snapperSnapshotConf=(["TIMELINE_CREATE"]="no" 
                                ["TIMELINE_MIN_AGE"]="1800" 
                                ["TIMELINE_LIMIT_HOURLY"]="5" 
                                ["TIMELINE_LIMIT_DAILY"]="7" 
                                ["TIMELINE_LIMIT_WEEKLY"]="0" 
                                ["TIMELINE_LIMIT_MONTHLY"]="0" 
                                ["TIMELINE_LIMIT_YEARLY"]="0" 
                                ["ALLOW_GROUPS"]="wheel"
                                )
                                # ["ALLOW_USERS]="userid"

# essential packages for initial install:
strListPacstrapPackage="base base-devel linux linux-firmware linux-headers man-db man-pages texinfo networkmanager btrfs-progs e2fsprogs lvm2 reflector sof-firmware vim"
                        #TODO: you can substitute linux with a kernel package of your choice, or you could omit it entirely when installing in a container.
                        #TODO: You could omit the installation of the firmware package when installing in a virtual machine or container.
case "${cpuManufacturer}" in        # https://wiki.archlinux.org/title/Microcode
    "amd")
        strListPacstrapPackage+=" amd-ucode"
    ;;

    "intel")
        strListPacstrapPackage+=" intel-ucode"
    ;;

    *)
        echo -e "\e[0;33mcase default: cpuManufacturer - Variable 'strListPacstrapPackage' must be modified manually.\e[39m"
    ;;
esac

# --- Not tested, check and specify manually ---
# lspci -k | grep -A 2 -E "(VGA|3D)"
if [ "${graficsCardInstalled}" = "true" ]; then 
    case "${graficsCardManufacturer}" in
        "amd")
            # https://wiki.archlinux.org/title/AMDGPU
            strListGraficsCardPackage="xf86-video-amdgpu"                     #TODO: test # X.org amdgpu video driver 
            #strListGraficsCardPackage="vulkan-radeon"                        #TODO: test # For Vulkan support # Test with only vulkan-radeon first
        ;;

        "nvidia")
            # https://wiki.archlinux.org/title/NVIDIA
            strListGraficsCardPackage="nvidia nvidia-utils nvidia-settings"   #TODO: test # 'nvidia' for use with the linux kernel
            # 'nvidia-lts' for use with the linux-lts kernel   # 'nvidia-dkms' for all other kernels
        ;;

        "intel")
            # https://wiki.archlinux.org/title/Intel_graphics
            strListGraficsCardPackage="xf86-video-intel"                      #TODO: test
            #strListGraficsCardPackage="vulkan-intel"                         #TODO: test # For Vulkan support (Haswell and newer)   
        ;;

        *)
            echo -e "\e[0;33mcase default: graficsCardManufacturer - Variable 'strListGraficsCardPackage' must be set manually.\e[39m"
            strListGraficsCardPackage=""
        ;;
    esac
fi


# ---------------------------------------------------------------------------
# --- Do not change - not supported yet:
#rootPartitionSize="25000"           #TODO: size in MB for the root partition   # V1: only set root partition size, home partition gets the remaining space
#homePartition="false"               #TODO: "/home" folder on a seperate partition (on the same disk as root partition)
#homePartitionSize="25000"           #TODO: size in MB for the root partition   # V2: only set home partition size, root partition gets the remaining space
#homePartitionNo=0                   #TODO: value will be overwritten/set in function format-partition   # Partition number, eg. "1" for /dev/vda1, "2" for /dev/vda2, ...
#swapPartition="true"                #TODO: # currently a separate swap partition will be created   # if a separate swap partition should be created # btrfs + snapper probably better "true"
#swapFile="false"                    #TODO: "true" or "false" # if a swap file should be created
# https://wiki.archlinux.org/title/Snapper#Suggested_filesystem_layout
# - Due to a Btrfs limitation, snapshotted volumes cannot contain swap files. Either put the swap file on another subvolume or create a swap partition.

#TODO: strListAdditionalPkg_zsh+=" zsh zsh-autosuggestions zsh-completions zsh-history-substring-search zsh-syntax-highlighting"   # zsh + some plugins
#TODO: zshConfSyntax="source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"   # To activate zsh-syntax-highlighting, add the following line at the end of `~/.zshrc`
