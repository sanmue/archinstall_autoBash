#!/usr/bin/env bash
# shellcheck disable=SC2034

# set -x   # enable debug mode

# ----------------------------------------------------------------
# Name                 archinstall_autoBash.config
# Description          config (bash variables) used by the shell scripts
# Author               Sandro Müller (sandro(ÄT)universalaccount.de)
# Licence              GPLv3
# ----------------------------------------------------------------

# for config: see further below '# Config / Variables'

# ---------
# Functions
# ---------
set-installDeviceName() {
    if [ -n "${afterReboot}" ]; then # if called after reboot due to sourcing this file (e.g. in 'archinstall_autobash_afterReboot.sh')
        return
    fi

    fileDeviceList="deviceList.txt"             # file where all possible install disks will be filled in
    fileDeviceName="deviceName.txt"             # will later be copied to /mnt (mount target of root partition) so in chroot the deviceName will be read from this file -> no prompt to enter devciceName again

    if [ -f "${fileDeviceName}" ]; then         # if deviceName not already set # necessary because this config will be sourced in other scripts, setting value one time is enough
        deviceName=$(cat "${fileDeviceName}")   # mapfile deviceName < "${fileDeviceName}"
        echo "deviceName read from file '${fileDeviceName}': '${deviceName}'"
    else
        lsblk -n --output NAME,SIZE,TYPE | grep --extended-regexp --invert-match 'rom|loop|airoot' | tee "${fileDeviceList}"
        declare -a arrDev                       # local array for list of possible devices
        while IFS= read -r line; do arrDev+=("$line"); done < "${fileDeviceList}"   # reading file '$fileDeviceList' line by line and put values in array '$arrDev'

        if [ "${#arrDev[@]}" -eq 0 ]; then      # No devices found
            echo -e "\e[0;31mNo Device found to install the system to, exit\e[39m"
            exit 1
        elif [ "${#arrDev[@]}" -eq 1 ]; then    # one possible device for install found
            deviceName=$(echo "${arrDev[0]}" | cut -d ' ' -f 1 | xargs)
            echo "'deviceName' set to:"
            echo "${deviceName}" | tee "${fileDeviceName}"
        else                                    # >1 devices found # in chroot always because of created partitions and/or beacause of usb boot stick:
            echo -e "\e[0;33mMore than one device found, specify variable 'deviceName' manually (can also be done in config file):\e[39m"
            read -r -p "Enter device name for installation (e.g. 'vda', 'sda', 'nvme0n1' ...): " deviceName
            if [ ! -e "/dev/${deviceName}" ]; then echo "'/dev/${deviceName}' not found, re-check and set manually, exit"; exit 1; fi
            echo "'deviceName' set to: ${deviceName}"
            echo "${deviceName}" | tee "${fileDeviceName}" >/dev/null
        fi
    fi
}

# ------------------
# Config / Variables
# ------------------

# --- Specify the config variables according to your needs:
initialPassword='Password1234!'     # initial password for all users in 'arrUserId' and root # Change here now and/or set new password manually later after reboot
forceChangePassword="false"         # "true" or "false" # forcing to change password at next login for all users in 'arrUserId' and root
arrUserId=("userid")                # specify UserID(s) of the account(s) to be created # space separated list, e.g.: arrUserId=("userid" "r2d2")
arrSudoUser=("userid")              # specify users who will have sudo privilege to execute any command (more than 1: space separated list)
defaultShellUser="zsh"              # default shell for user when created, e.g.: bash, zsh, ...
# groups
encryption="true"                   # "true" or "false" # if disk should be encrypted   # https://wiki.archlinux.org/title/Dm-crypt
encryptionDeviceMapperPath="/dev/mapper" # do not change
encryptionRootName="root"           # systemd-boot mounts the encrypted root as /dev/mapper/root by default, so i changed from 'cryptroot' to 'root'
encryptionRootPath="${encryptionDeviceMapperPath}/${encryptionRootName}"
encryptionSwapName="cryptswap"      # 'partitionLabelSwap' will be set to this value too (see further below) # if swap partition
encryptionSwapPath="${encryptionDeviceMapperPath}/${encryptionSwapName}" # if swap partition
# encrypted swap: config without suspend-to-disk support # https://wiki.archlinux.org/title/Dm-crypt/Swap_encryption#UUID_and_LABEL :
encryptionSwapCrypttab="swap LABEL=${encryptionSwapName} /dev/urandom swap,offset=2048,cipher=aes-xts-plain64,size=512,sector-size=4096" # entry in /etc/crypttab for encrypted swap partition
pathToCrypttab="/etc/crypttab"      # only relevant for GRUB + encryption
pathToMkinitcpioConf="/etc/mkinitcpio.conf"
keyfile="true"                      # "true" or "false" # only relevant for GRUB # if encryption="true" # using a keyfile to autamatically decrypt root partition on boot
keyfileName="crypto_keyfile.key"    # only relevant for GRUB + encryption
keyfileStorageLocation="/etc/cryptsetup-keys.d" # only relevant for GRUB + encryption
keyfilePath="${keyfileStorageLocation}/${keyfileName}" # only relevant for GRUB + encryption
fileRootPartition="deviceRootPartition.txt"  # e.g. /dev/vda2 # will be set in format-partition(); will be read from in chroot, needed for keyfile: cryptsetup luksAddKey /dev/vda2 ...
if [ -e "${fileRootPartition}" ]; then rootPartition=$(cat "${fileRootPartition}"); fi # e.g. /dev/vda2

consoleKeyboardLayout="de-latin1"   # console keyboard layout: temporary for current session + permanent (>> /etc/vconsole.conf)   # ls /usr/share/kbd/keymaps/**/*.map.gz
terminalFont="ter-122b"             # terminal font (temporary for current session)   # ls /usr/share/kbd/consolefonts/ | grep ter | less
timezone="Europe/Berlin"            # timezone   # timedatectl list-timezones # ls /usr/share/zoneinfo

partitionDisk="true"                # "true" or "false" # if the disk should be partitioned # only simple partition layouts supported: https://wiki.archlinux.org/title/Partitioning#Example_layouts
                                    # set value to "false" if disk is already partitioned
formatPartition="true"              # "true" or "false" # if partitions should be formatted
                                    # set value to "false" if disk is already partitioned an formated; set according to variable 'partitionDisk'
mountPartition="true"               # "true" or "false" # if the partitions generated by the script should be mounted   # set according to variable 'formatPartition' or if your layout matches the layout-example
eraseDisk="false"                   # "true" or "false" # erase complete disk by writing random bytes via 'dd'-command (could take some time)
blockSize="512"                     # default: "512" (bytes), "4096" # blocksize parameter for dd command; used if eraseDisk="true"

# Device to install the system to. If you have more than 1 disk installed, you could set 'setDeviceNameManually' to "false" and set 'deviceName' manually, or you will be asked via prompt in the script
setDeviceNameManually="false"       # "true" or "false" # whether setting the name manually (variable 'deviceName') or via function 'set-installDeviceName'
if [ "${setDeviceNameManually}" = "false" ]; then
    set-installDeviceName           # function to set variable 'deviceName' # if more than 1 device available: asks for device name to be used
else                                # list possible disks: lsblk | grep --extended-regexp --invert-match 'rom|loop|airoot'
    deviceName="vda"                # set value manually # device name (eg. vda, sda, nvme0n1, ...); ! NOT a partition like 'vda1' or 'sda3' ... !
    echo "- 'deviceName' for installation manually set to: '${deviceName}'"
fi

if [ -f "/sys/firmware/efi/fw_platform_size" ]; then bootMode="Uefi"; else bootMode="Bios"; fi   # "Bios" or "Uefi" # boot mode
partitionType="gpt"                 # "gpt" (Bios and Uefi boot mode) or "mbr" (only for Bios boot mode) # Partition type
efiPartitionSize="4000"             # size in MB # only for UEFI boot mode: size of EFI-Partition # recommended in Arch wiki: 1000 MB # increase e.g. for Archiso / Grml / SystemRescue on EFI (+ ~1GB each), ...
swapType="none"                     # 'partition' or 'file' or 'none' # will create a swap partition or a swap file or no swap
swapSize="4000"                     # size in MB # specify the swap size (for swap 'partition' or 'file')
zram="true"                         # "true" or "false": enable or disable zram (usage as swap) (post-install, after-reboot-script # https://wiki.archlinux.org/title/Zram
                                    # separate, since you may want to additionally config a backing device for a zram (https://wiki.archlinux.org/title/Zram#Enabling_a_backing_device_for_a_zram_block)
zramSize="2"                        # denominator of fraction; e.g. 'zramSize="2"': 1/2 = 50 % of RAM size will be used for zram (-> variable size depending on RAM size)
zramGeneratorConfFilePath="/etc/systemd/zram-generator.conf"
zramParameterConfFilePath="/etc/sysctl.d/99-vm-zram-parameters.conf"
zswapDisable_kernelOption='zswap.enabled=0' # kernel option to disable zwap
filesystemType="btrfs"              # "btrfs", "ext4",... # only tested with btrfs # filesystem type for root partition   # man mkfs.<filesystemType>
bootloader="systemd-boot"           # "grub" or "systemd-boot" # set prefered bootlaoder # systemd-boot is UEFI only
if [ "${bootMode}" = "Bios" ]; then bootloader="grub"; fi # systemd-boot is UEFI only
grubConfDefaultPath="/etc/default/grub"
snapperSnapshot="true"              # "true" or "false" # only available if filesystemType="btrfs": install snapper and create snapper config for subvolume mounted at '/'
snapperRollback="true"              # "true" or "false" # only available if filesystemType="btrfs": install and config snapper-rollback (AUR) for easy rollback to a snapshot
filesDirName="files"
rollbackFunctionFileName="rollbackFunction.txt" # only relevant when using systemd-boot

graficsCardInstalled="true"         # "true" or "false" # set to "false" if if you want to do specify manufacturer + packages to install manually
                                    # if "true": script will try to determine the manufacturer and install the corresponding packages (see further below)
                                    # but it is strongly recommended to read the correspondig Arch Wiki article to check and probably adjust the packages to your needs / the current recommendations in the wiki

arrLocalegen=("en_US.UTF-8 UTF-8" "de_DE.UTF-8 UTF-8" "de_DE ISO-8859-1" "de_DE@euro ISO-8859-15")   # /etc/locale.gen # one or more locales to be uncommented in /etc/locale.gen
defaultLang="en_US.UTF-8 UTF-8"     # default language
defaultLangPreferred="en_US.UTF-8"  # preferred default language (will be set in /etc/locale.conf)   # localectl list-keymaps

myHostname="archmachine"            # specify hostname for the machine
myDomain="home.arpa"                # specify domain

networkMgmt="networkmanager network-manager-applet" # network-manager-applet: for a system tray applet (nm-applet) # see also pactrap further below
strListNetworkPkg="${networkMgmt}"
strListNetworkPkg+=" wpa_supplicant" # wpa_supplicant: cross-platform supplicant with support for WPA, WPA2 and WPA3
strListAdditionalPkg="acpi acpid acpi_call alsa-utils avahi bash-completion bluez bluez-utils dialog dnsutils dosfstools dnsmasq flatpak git gvfs gvfs-smb inetutils ipset nfs-utils nss-mdns ntp openbsd-netcat openssh os-prober pulseaudio sof-firmware rsync terminus-font vde2 xdg-user-dirs xdg-utils"
if [ "${filesystemType}" = "btrfs" ] && [ "${snapperSnapshot}" = "true" ]; then strListAdditionalPkg+=" snapper snap-pac inotify-tools"; fi
strListAdditionalPkg_print="cups hplip"           # Printing support
strListAdditionalPkg_firewall="firewalld"         # "firewalld" # Firewall (ufw, ... not supported by the script yet)
# strListAdditionalPkg_PowerMgmt="tlp"             # remove comment sign '#' to install # Linux Advanced Power Management # not needed if installing a desktop environment or a virtual machine (VM)
strListAdditionalPkg_conflicting="iptables-nft"   # iptables-nft (or iptables) needed for VM # iptables-nft and iptables are in conflict. Script will confirm to remove iptables.
virtualization="false"                            # "true" or "false" # if packages needed for virtualization should be installed   # TODO: configuration
strListAdditionalPkg_VM="qemu-full virt-manager virt-viewer bridge-utils dnsmasq dmidecode ebtables edk2-ovmf iptables-nft libguestfs libvirt openbsd-netcat swtpm vde2 virt-install" # virtualization (Qemu/KVMM) # iptables-nft should already be installed

# Services to enable:
arrService=("acpid" "bluetooth" "cups.service" "avahi-daemon" "fstrim.timer" "NetworkManager" "reflector.timer" "sshd" "systemd-timesyncd.service") # "lvm2-monitor.service" lvm not used / lvm2 package not installed (see pacstrap)
if [ "${strListAdditionalPkg_firewall}" = "firewalld" ]; then arrService+=("firewalld"); fi
if [ "${virtualization}" = "true" ]; then arrService+=("libvirtd"); fi
# "snapper-timeline.timer" for creating timeline snapshots; but I prefer package 'snap-pac' only (-> update/remove/install), and no timeline snapshots
if [ "${filesystemType}" = "btrfs" ] && [ "${snapperSnapshot}" = "true" ]; then arrService+=("snapper-boot.timer"); fi                                  # Snapshots on boot for root configuration
# if [ "${filesystemType}" = "btrfs" ] && [ "${snapperSnapshot}" = "true" ] && [ "${bootloader}" = "grub" ]; then arrService+=("grub-btrfsd.service"); fi # Service to regenerate grub-btrfs.cfg # only enable if 'grub-btrfs' is installe (see further above)
if [ "${filesystemType}" = "btrfs" ] && [ "${snapperSnapshot}" = "true" ]; then arrService+=("snapper-cleanup.timer"); fi                               # Daily Cleanup of Snapper Snapshots
if [ -n "$strListAdditionalPkg_PowerMgmt" ]; then arrService+=("tlp"); fi
efistubUpdatePathFilename="efistub-update.path"
if [ "${bootloader}" = "systemd-boot" ]; then arrService+=("systemd-boot-update.service"); fi # autamatically update systemd-boot
if [ "${bootloader}" = "systemd-boot" ]; then arrService+=("${efistubUpdatePathFilename}"); fi # autom. copy kernel and initramfs to efi partition if changed

# System (Rescue) on ESP - you may have to increase the size of the efi partition
systemOnESP=("archiso" "grml" "sysresccd") # permitted values: "archiso" and/or "grml" and/or "sysresccd" # also folder name on ESP # Archiso on ESP (boot into rescue system) # only if bootloader is systemd-boot
reserveDiskspaceESP=300 # size in MB # reserve disk space which has to remain free after install of systemOnESP

# TODO: Check timesync settings / ntp:
# - timedatectl show-timesync --all
# - timedatectl set-ntp true # Not necessary, especially if 'systemctl enable systemd-timesyncd.service' used

# Desktop Environment
installDesktopEnvironment="true"    # "true" or "false"
desktopEnvironmentName="Gnome"      # "Gnome" # Only Gnome supported by now
strListBasePkg_Gnome="gnome gnome-tweaks gdm" # add 'xorg', 'gnome-extra', ... if needed # base packages to install for Gnome
gnomeThemes="arc-gtk-theme arc-icon-theme" # additional gnome themes to install
strListBasePkg_Gnome+=" ${gnomeThemes} transmission-gtk"
strListDesktopEnvPgk="firefox" # additional packes to install when installing a desktop environment
if [[ $(systemd-detect-virt) != *"none"* ]]; then # if the machine is a virtual machine
    strListDesktopEnvPgk+=" spice-vdagent" # https://man.archlinux.org/man/spice-vdagent.1.en#FEATURES # e.g. support of copy and paste between vm guest and its host, ...
fi

# Multimedia
installMultimediaCodecs="true"      # "true" or "false"
strListMultimediaCodecs=("ffmpeg gstreamer gst-libav gst-plugins-bad gst-plugins-base gst-plugins-good gst-plugin-pipewire gst-plugin-va") # gst-plugins-ugly

# Additional fonts
installFont="true"                  # "true" or "false" # if the additional fonts from 'strListFontPkg' shall be installed
strListFontPkg="adobe-source-code-pro-fonts adobe-source-han-sans-otc-fonts adobe-source-han-serif-otc-fonts cantarell-fonts gentium-plus-font gnu-free-fonts inter-font noto-fonts noto-fonts-cjk noto-fonts-emoji tex-gyre-fonts ttf-anonymous-pro ttf-bitstream-vera ttf-cascadia-code ttf-croscore ttf-dejavu ttf-droid ttf-fantasque-sans-mono ttf-fira-code ttf-fira-mono ttf-hack ttf-ibm-plex ttf-inconsolata ttf-jetbrains-mono ttf-junicode ttf-liberation ttf-meslo-nerd ttf-monofur ttf-opensans ttf-roboto ttf-roboto-mono"

# ------------------------------------
# --- Do not change until you are sure
if [ -n "${deviceName}" ]; then device="/dev/${deviceName}"; fi # disk to be formated, e.g. /dev/vda (NOT a partition like /dev/vda1)
partitionLabelRoot="ROOT"           # label for root partition
# partitionLabelHome="HOME"         # label for home partition # not needed since currently a seperate home partintion is not implemented in the script
partitionLabelEfi="EFI"             # label for EFI partition
partitionLabelSwap="${encryptionSwapName}" # label for swap partition
fileSystemTypeEfi="fat"             # file system type for efi partition
fatSize="32"                        # or "12","16","32" # type of file allocation tables used for FAT-Filesystem (Uefi: format option for efi-partition)   # man mkfs.fat
mountOptionDefault=""               # Standard mount option; empty: let mount command go for it
mountOptionBtrfs="noatime,compress=zstd" # ',space_cache=v2' will be added automatically (as of 10/2024) # mountOptionBtrfs="noatime,compress=zstd,space_cache=v2" # mount options if formatted with btrfs filesystem
mountOptionEfi="fmask=0137,dmask=0027" # mount options for the efi partition # UEFI boot mode only
efiPartitionNo=0                    # initialization, actual value will be set in function 'format-partition' # Partition number, eg. "1" for /dev/vda1, "2" for /dev/vda2, ...
swapPartitionNo=0                   # initialization, actual value will be set in function 'format-partition' # Partition number, eg. "1" for /dev/vda1, "2" for /dev/vda2, ...
rootPartitionNo=0                   # initialization, actual value will be set in function 'format-partition' # Partition number, eg. "1" for /dev/vda1, "2" for /dev/vda2, ...
pathEfi="/efi"                      # "/efi" # "/boot/efi" is deprecated # no not change # TODO "/boot/efi" not testet
pathGrubCfg="/boot/grub/grub.cfg"   # path with startintg '/' # path to grub config file
bootloaderId="GRUB"                 # or "archlinux", ... whatever you like # not used for systemd-boot

snapperSnapshotFolder="/.snapshots" # DO NOT CHANGE # folder for snapper snapshots
snapperRollbackFolder="/.btrfsroot" # DO NOT CHANGE # folder used by snapper-rollback (AUR)
snapperRollbackConfig="/etc/snapper-rollback.conf" # config file for snapper-rollback (AUR)

snapperSnapshotsSubvolName='@snapshots' # should not be changed
# do not change: ["@"]="/" and ["${snapperSnapshotsSubvolName}"]="${snapperSnapshotFolder}"
declare -A btrfsSubvolLayout=(  ["@"]="/"
                                ["${snapperSnapshotsSubvolName}"]="${snapperSnapshotFolder}"
                                ["@home"]="/home"
                                ["@opt"]="/opt"
                                ["@srv"]="/srv"
                                ["@tmp"]="/tmp"
                                ["@usrlocal"]="/usr/local"
                                ["@varcache"]="/var/cache"
                                ["@varlibclamav"]="/var/lib/clamav"
                                ["@varlibflatpak"]="/var/lib/flatpak"
                                ["@varlibdocker"]="/var/lib/docker"
                                ["@varlibvirtimages"]="/var/lib/libvirt/images"
                                ["@varlibmachines"]="/var/lib/machines"
                                ["@varlibportables"]="/var/lib/portables"
                                ["@varlog"]="/var/log"
                                ["@varopt"]="/var/opt"
                                ["@varspool"]="/var/spool"
                                ["@vartmp"]="/var/tmp"
                                )
# https://cgit.freedesktop.org/systemd/systemd/commit/?id=113b3fc1a8061f4a24dd0db74e9a3cd0083b2251:
# - subvolumes "var/lib/portables" + "var/lib/machines" # would be generated autamatically by systemd
# if [ "${virtualization}" = "true" ]; then btrfsSubvolLayout+=(["@libvirtimages"]="/var/lib/libvirt/images"); fi # Qemu/KVM
swapFileFolder="/swap"              # if swapType="file" and btrfs + subvol # set name for swapfile folder
swapFileName="swapfile"             # if swapType="file" and btrfs + subvol # set name for swapfile
swapFilePath="${swapFileFolder}/${swapFileName}" # if swapType="file" and btrfs + subvol # must be defined since used as parameter (e.g. calling format-partition())
swapFileSubvolName="@swap"          # if swapType="file" and btrfs + subvol # set name of btrfs subvolume for swapfile
if [ "${swapType}" = "file" ]; then
    btrfsSubvolLayout+=(["${swapFileSubvolName}"]="${swapFileFolder}");
    # https://wiki.archlinux.org/title/Snapper#Suggested_filesystem_layout
    # - Due to a Btrfs limitation, snapshotted volumes cannot contain swap files. 
    #   Either put the swap file on another subvolume or create a swap partition.
fi

rootSubvolumeName="@"               # "@" # initialization # will be overwritten by function 'get-rootSubvolumeName'
snapperConfigName_root="root"       # name of the snapper config for subvolume mounted at '/'

declare -A snapperSnapshotConf=(["ALLOW_GROUPS"]="wheel"
                                ["TIMELINE_CREATE"]="no"
                                ["TIMELINE_MIN_AGE"]="1800"
                                ["TIMELINE_LIMIT_HOURLY"]="5"
                                ["TIMELINE_LIMIT_DAILY"]="7"
                                ["TIMELINE_LIMIT_WEEKLY"]="0"
                                ["TIMELINE_LIMIT_MONTHLY"]="0"
                                ["TIMELINE_LIMIT_YEARLY"]="0"
                                )
                                # ["ALLOW_USERS]="userid"

# essential packages for initial install:
strListPacstrapPackage="base"
arrKernel=("linux" "linux-lts") # specify the kernels to be installed # it could become handy to have a 2nd kernel available
for kernel in "${arrKernel[@]}"; do
    strListPacstrapPackage+=" ${kernel} ${kernel}-headers"
done
# all other packages could also be installed when in chroot environment, but lets add them here too:
strListPacstrapPackage+=" linux-firmware" # You can omit the installation of the firmware package when installing in a virtual machine or container.
if [ "${bootloader}" = "grub" ]; then strListPacstrapPackage+=" grub"; fi # systemd-boot is shipped with the systemd package which is a dependency of the base meta package
if [ "${bootMode}" = "Uefi" ]; then strListPacstrapPackage+=" efibootmgr"; fi
# if [ "${filesystemType}" = "btrfs" ]; then strListPacstrapPackage+=" btrfs-progs"; fi
# if [ "${filesystemType}" = "ext4" ]; then strListPacstrapPackage+=" e2fsprogs"; fi
filesystemPackage="btrfs-progs e2fsprogs mtools"; strListPacstrapPackage+=" ${filesystemPackage}"
# lvmPackage="lvm2"; strListPacstrapPackage+=" ${lvmPackage}" # Logical Volume Manager (LVM) # we do not use lvm # see also "lvm2-monitor.service" not enabled
strListPacstrapPackage+=" ${networkMgmt}"
if [ "${encryption}" = "true" ]; then strListPacstrapPackage+=" cryptsetup"; fi
additionalInitialPackages="base-devel man-db man-pages texinfo sudo reflector vim"
strListPacstrapPackage+=" ${additionalInitialPackages}"
strListPacstrapPackage+=" ${defaultShellUser}"

# https://wiki.archlinux.org/title/Microcode
cpuManufacturer=$(lscpu | grep -e '^Model name')
# cpuManufacturer="XXX"              # "amd" or "intel"; others: specify packages manually in variable strListCpuPgk further below
if [[ $(systemd-detect-virt) = *"none"* ]]; then # install microcode for processors only if not a virtual machine
    case "${cpuManufacturer}" in
        *AMD*)
            strListPacstrapPackage+=" amd-ucode"
        ;;

        *Intel*)
            strListPacstrapPackage+=" intel-ucode"
        ;;

        *)
            echo -e "\e[0;33mcase default: cpuManufacturer - Variable 'strListPacstrapPackage' must be modified manually.\e[39m"
            #strListPacstrapPackage+=" XXX"
        ;;
    esac
fi

# --- GRAFICS - need testing, check and config manually for your system ---
# https://wiki.archlinux.org/title/AMDGPU
# https://wiki.archlinux.org/title/Intel_graphics and https://wiki.archlinux.org/title/Hardware_video_acceleration
# https://wiki.archlinux.org/title/NVIDIA
# For 32-bit application support the pacman 'multilib' repo hast to be enabled
# lspci -k | grep -A 2 -E "(VGA|3D)"   # lspci | grep -e VGA -e 3D

strListGraficsCardPackage=("")
if [ "${graficsCardInstalled}" = "true" ]; then
    # but see also: install-grafics() in .shlib: only install strListGraficsCardPackage, if graficsCardInstalled AND installDesktopEnvironment = 'true'
    strListGraficsCardPackage+="xorg-server xorg-xinit "

    graficsCardManufacturer=$(lspci | grep -E "(VGA|3D)")
    # graficsCardManufacturer="XXX"   # set manually: "AMD" or "NVIDIA" or "Intel"
    case "${graficsCardManufacturer}" in
        *AMD*)
            # strListGraficsCardPackage+="mesa xf86-video-amdgpu xf86-video-ati "
            strListGraficsCardPackage+="mesa vulkan-radeon libva-mesa-driver mesa-vdpau "
            #strListGraficsCardPackage+="lib32-mesa lib32-vulkan-radeon lib32-libva-mesa-driver lib32-mesa-vdpau " # For 32-bit application support
        ;;

        *Intel*)
            # strListGraficsCardPackage+="mesa xf86-video-intel "
            strListGraficsCardPackage+="mesa vulkan-intel " # For Vulkan support (Broadwell and newer)
            # strListGraficsCardPackage+="lib32-mesa lib32-vulkan-intel " # For 32-bit application support
            strListGraficsCardPackage+="intel-media-driver " # Hardware video acceleration (Broadwell and newer)
            # strListGraficsCardPackage+="libva-intel-driver "
        ;;

        *NVIDIA*)
            # strListGraficsCardPackage+="mesa libva-mesa-driver xf86-video-nouveau " # open-source nouveau driver
            # strListGraficsCardPackage+="nvidia-open nvidia-utils nvidia-settings dkms nvidia-open-dkms " # Turing (NV160/TUXXX) and newer
            # strListGraficsCardPackage+="nvidia nvidia-utils nvidia-settings " # Maxwell (NV110/GMXXX) through Ada Lovelace (NV190/ADXXX)
            # 'nvidia-lts' for use with the linux-lts kernel; 'nvidia-dkms dkms' for all other kernels instead of 'nvidia'
            strListGraficsCardPackage+="dkms nvidia-dkms "
            # strListGraficsCardPackage+=(" lib32-nvidia-utils") # For 32-bit application support
        ;;

        *)
            echo -e "\e[0;33mcase default: graficsCardManufacturer - not found in the list (-> not *AMD*, *NVIDIA* or *Intel*).\e[39m"
            echo -e "\e[0;33mNo grafics card installed or set variable 'strListGraficsCardPackage' in the script manually if necessary.\e[39m"
            strListGraficsCardPackage=("") # for others: add packages manually
        ;;
    esac
fi

# ---------------------------------------------------------------------------
# --- Do not change / not supported yet:
# rootPartitionSize="25000"         # TODO: size in MB for the root partition   # V1: only set root partition size, home partition gets the remaining space
# homePartition="false"             # TODO: "/home" folder on a seperate partition (on the same disk as root partition)
# homePartitionSize="25000"         # TODO: size in MB for the root partition   # V2: only set home partition size, root partition gets the remaining space
# homePartitionNo=0                 # TODO: value will be overwritten/set in function format-partition   # Partition number, eg. "1" for /dev/vda1, "2" for /dev/vda2, ...
# deviceType="ssd"                  # TODO: currentyly just checking if 'btrfs' when creating btrfs subvolumes
                                    # "ssd" or s.th. else (e.g. "hd", "xxx") # if filesystemType="btrfs" + "ssd": other mount-options in fstab; else: standard ('ssd' should me added automatically)

# TODO: strListAdditionalPkg_zsh="zsh zsh-autosuggestions zsh-completions zsh-history-substring-search zsh-syntax-highlighting"  # zsh + some plugins
# TODO: confActivateSyntaxHighlighting_zsh="source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"   # To activate zsh-syntax-highlighting, add the following line at the end of `~/.zshrc`
