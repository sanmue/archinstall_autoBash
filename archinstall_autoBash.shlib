#!/usr/bin/env bash
# shellcheck disable=SC2154

# set -x   # enable debug mode

# ----------------------------------------------------------------
# Name                 archinstall_autoBash.shlib
# Description          Functions used by the shell scripts
# Author               Sandro Müller (sandro(ÄT)universalaccount.de)
# Licence              GPLv3
# ----------------------------------------------------------------

# ---------
# Functions
# ---------
check-bashVersion() {
    # Parameter 1: min. required (major) bash version

    if [ "${BASH_VERSINFO[0]}" -lt "${1}" ]; then
        echo -e "Current bash version: ${BASH_VERSINFO[0]}\nMin. required version: '${1}'\nexit, sorry"
        exit 1
    fi
}

check-devicePath() {
    # Parameter 1: device path (e.g. /dev/vda)

    echo "Checking if '${1}' is available"
    if [ ! -b "${1}" ]; then   # if ${device} ("file") not available
        echo -e "\e[0;33m!!! '${1}' not found !!!\e[39m \nExit the script"
        exit 1
    fi
}

check-exitStatusLastCommand() {
    # Parameter 1: exit status (0 = no error)

    if [ "${1}" -ne 0 ]; then
        echo -e "\e[0;31m----------------------------------------\e[39m"
        echo -e "\e[0;31mERROR - Exit status last command: '${1}'\e[39m"
        echo -e "\e[0;31m----------------------------------------\e[39m"
        echo "Press Enter to continue." && read -r
    fi
}

erase-device() {
    # Parameter 1: device path (e.g. /dev/vda)
    # Parameter 2: blocksize

    if [ "${eraseDisk}" = "true" ]; then   # Erase (overwrite) device
        echo -e "\e[0;33m!!! Erasing '${1}', will take some time... !!!\e[39m"
        echo "Press Enter to continue or '<CTRL> + <C>' to cancel"   # only for testing
        read -r                                                      # only for testing
        dd if=/dev/urandom of="${1}" bs="${2}" status=progress       # TODO: test # erase device by copying random bytes to the whole disk
    fi
}

partition-disk() {
    # Parameter 1: bootmode (Bios or Uefi)
    # Parameter 2: partition type (gpt or mbr) (Uefi: only gpt)
    # Parameter 3: device path (e.g. /dev/vda)
    # Parameter 4: size of swap partition
    # Parameter 5: size of EFI partition (only when Uefi bootmode)

    if [ "${1}" = "Bios" ]; then
        partition-diskBios "${2}" "${3}" "${4}"
    else
        partition-diskUefi "${3}" "${4}" "${5}"
    fi
}

partition-diskBios() {
    # Parameter 1: partition type (gpt or mbr)
    # Parameter 2: device path (e.g. /dev/vda)
    # Parameter 3: size of swap partition

    if [ "$1" = "gpt" ]; then
        (
        echo g   # --- create a new empty GPT partition table ---
        
        echo n   # --- add a new partition: Small 1 MB partition ---
        echo     # accept default value (Partition No: 1)
        echo     # accept default value (Start first sector)
        echo +1M # partition size
        echo t   # change partition type
        # echo     # accept default value (Partition No: 1)
        echo 4   # Type: Bios boot

        echo n   # --- add a new partition: Swap ---
        echo     # accept default value (Partition No: 2)
        echo     # accept default value (Start of first sector)
        echo +"${3}"M # partition size
        echo t   # change partition type
        echo     # accept default value (Partition No: 2)
        echo 19  # Type: Linux swap

        echo n   # --- add a new partition: root ---
        echo     # accept default value (Partition No: 3)
        echo     # accept default value (start of first sector)
        echo     # accept default value (end of last sector (Remainder of device))

        echo w   # Write changes
        ) | sudo fdisk "${2}" 1>/dev/null
    else
        # partition type "mbr"
        (
        echo o   # --- create a new empty MBR (DOS) partition table ---
        
        echo n   # --- add a new partition: Swap ---
        echo p   # primary (partition type)
        echo     # accept default value (Partition No: 1)
        echo     # accept default value (Start of first sector)
        echo +"${3}"M # partition size
        echo t   # change partition type
        echo     # accept default value (Partition No: 1)
        echo 82  # Type: Linux swap / Solaris

        echo n   # --- add a new partition: root ---
        echo p   # primary (partition type)
        echo     # accept default value (Partition No: 2)
        echo     # accept default value (start of first sector)
        echo -1M # leaves small unallocated space of 1MB at the end of the disk

        echo w   # Write changes
        ) | sudo fdisk "${2}" 1>/dev/null
    fi
}

partition-diskUefi() {
    # Parameter 1: device path (e.g. /dev/vda)
    # Parameter 2: size of swap partition
    # Parameter 3: size of EFI partition

    (
    echo g   # --- create a new empty GPT partition table ---

    echo n   # --- add a new partition: EFI boot partition ---
    echo     # accept default value (Partition No: 1)
    echo     # accept default value (Start first sector)
    echo +"${3}"M # partition size
    echo t   # change partition type
    echo     # accept default value (Partition No: 1)
    echo 1   # Type: EFI System

    echo n   # --- add a new partition: Swap ---
    echo     # accept default value (Partition No: 2)
    echo     # accept default value (Start of first sector)
    echo +"${2}"M # partition size
    echo t   # change partition type
    echo     # accept default value (Partition No: 2)
    echo 19  # Type: Linux swap

    echo n   # --- add a new partition: root ---
    echo     # accept default value (Partition No: 3)
    echo     # accept default value (start of first sector)
    echo     # accept default value (end of last sector (Remainder of device))

    echo w   # Write changes
    ) | sudo fdisk "${1}" 1>/dev/null
}

format-partition() {
    # Parameter 1: device
    # Parameter 2: bootMode
    # Parameter 3: partitionType
    # Parameter 4: filesystemType
    # Parameter 5: fileSystemTypeEfi
    # Parameter 6: fatSize
    # Parameter 7: partitionLabelRoot
    # Parameter 8: partitionLabelEfi
    # Parameter 9: partitionLabelHome

    # TODO: check path of partition device name

    if [ "${2}" = "Bios" ] && [ "${3}" = "gpt" ]; then                  # --- Bios + gpt
        # Partition No 1: empty
        set-partitionNo "swap" "2"
        set-partitionNo "root" "3"

        mkswap "${1}${swapPartitionNo}"                                 # make swap-partition

        if [ "${4}" = "btrfs" ]; then
            mkfs."${4}" -f -L "${7}" -n 32k "${1}${rootPartitionNo}"    # format root-partition, btrfs, force (-f), blocksize (-n)
        elif [ "${4}" = "ext4" ]; then
            mkfs."${4}" -F -L "${7}" "${1}${rootPartitionNo}"           # format root-partition, ext4, force (-F)
        else
            mkfs."${4}" -L "${7}" "${1}${rootPartitionNo}"              # format root-partition, other
        fi

    elif [ "${2}" = "Bios" ] && [ "${3}" = "mbr" ]; then                # --- Bios + mbr
        set-partitionNo "swap" "1"
        set-partitionNo "root" "2"

        mkswap "${1}${swapPartitionNo}"                                 # make swap-partition

        if [ "${4}" = "btrfs" ]; then
            mkfs."${4}" -f -L "${7}" -n 32k "${1}${rootPartitionNo}"    # format root-partition, btrfs, force (-f), blocksize (-n)
        elif [ "${4}" = "ext4" ]; then
            mkfs."${4}" -F -L "${7}" "${1}${rootPartitionNo}"           # format root-partition, ext4, force (-F)
        else
            mkfs."${4}" -L "${7}" "${1}${rootPartitionNo}"              # format root-partition
        fi

    else                                                                # --- Uefi + gpt
        set-partitionNo "efi" "1"
        set-partitionNo "swap" "2"
        set-partitionNo "root" "3"

        mkfs."${5}" -F "${6}" -n "${8}" "${1}${efiPartitionNo}"         # format efi-partition
        mkswap "${1}${swapPartitionNo}"                                 # make swap-partition
    fi

# ### TEST --------------------------------------------------------------------
# echo -e "\nPress Enter to continue - function 'format-partition': before encrypting root disk"
# read -r
# ### TEST --------------------------------------------------------------------

    # TODO seperate function for encryption
    if [ "${encryption}" = "true" ]; then # encryption # https://wiki.archlinux.org/title/Dm-crypt
        # echo "${encryptionPassword}" | cryptsetup luksFormat -y -v --type luks2 --label "${encryptionRootName}" "${1}${rootPartitionNo}" --key-file -    # encrypt root partition # https://wiki.archlinux.org/title/Dm-crypt/Encrypting_an_entire_system#Preparing_non-boot_partitions
        # https://man.archlinux.org/man/core/cryptsetup/cryptsetup-luksFormat.8.en
        # https://wiki.archlinux.org/title/Dm-crypt/Device_encryption#Encrypting_devices_with_cryptsetup
        # GRUB's support for LUKS2 is limited; see GRUB#Encrypted /boot for details.
        echo -e "\nEnrypting root partition..."
        cryptsetup luksFormat --pbkdf pbkdf2 --label "${encryptionRootName}" "${1}${rootPartitionNo}"   # Lable (-L) needed in function 'config-bootloader' for easy grep of UUID of root partition from blkid

        # echo "${encryptionPassword}" | cryptsetup open -v --type luks2 "${1}${rootPartitionNo}" "${encryptionRootName}" --key-file -   # '-' : read from stdin -> echo
        #cryptsetup open -v --type luks2 "${1}${rootPartitionNo}" "${encryptionRootName}"
        echo -e "\nOpening encrypted root partition..."
        cryptsetup open "${1}${rootPartitionNo}" "${encryptionRootName}"
                                                    # https://man.archlinux.org/man/core/cryptsetup/cryptsetup-open.8.en
        if [ "${4}" = "btrfs" ]; then
            #mkfs."${4}" -f -L "${7}" -n 32k "${encryptionRootPath}"        # format root-partition, btrfs, force (-f), label (-L), blocksize (-n)   # TODO: config variable for blocksize
            #mkfs."${4}" -f "${encryptionRootPath}"
            mkfs."${4}" -f -L "${7}" "${encryptionRootPath}"
        elif [ "${4}" = "ext4" ]; then
            mkfs."${4}" -F -L "${7}" "${encryptionRootPath}"                # format root-partition, ext4, force (-F), label (-l)   # encryptionRootPath e.g.: '/dev/mapper/cryptroot'
        else
            mkfs."${4}" "${encryptionRootPath}"                             # format root-partition, other filesystems
        fi
    else                                                            # no encryption
        if [ "${4}" = "btrfs" ]; then
            mkfs."${4}" -f -L "${7}" -n 32k "${1}${rootPartitionNo}"        # format root-partition, btrfs, force (-f), label (-L), blocksize (-n)   # TODO: config variable for blocksize
        elif [ "${4}" = "ext4" ]; then
            mkfs."${4}" -F -L "${7}" "${1}${rootPartitionNo}"               # format root-partition, ext4, force (-F), label (-l)
        else
            mkfs."${4}" "${1}${rootPartitionNo}"                            # format root-partition, other filesystems
        fi
    fi
    
}

set-partitionNo() {
    # Parameter 1: type                     # e.g. "efi", "swap" or "root"
    # Parameter 2: partitionNo              # e.g. "1"
                                            # https://wiki.archlinux.org/title/Device_file#Partition
    local separator="p"                     # if device name ends with a number, drive name and partition number is separated with the letter "p"

    if [[ "${device}" = *[0-9] ]]; then     # if device name ends with a number
        local partitionNo="${separator}${2}"
    else
        local partitionNo="${2}"
    fi

    case "${1}" in
        "efi")
            efiPartitionNo="${partitionNo}"
        ;;

        "swap")
            swapPartitionNo="${partitionNo}"
        ;;

        "root")
            rootPartitionNo="${partitionNo}"
        ;;

        *)
            echo -e "\e[0;31m case default - function 'set-partitionNo': type not found, exit. \e[39m"
            exit 1
        ;;
    esac
}

mount-partitionRootInitial() { 
    # Parameter 1: device (e.g. '/dev/vda') or "encryptionDeviceMapperPath/" (e.g. '/dev/mapper/')
    # Parameter 3: rootPartitionNo (e.g. '3') or encryptionRootName (e.g. 'cryptroot')
    # Parameter 4: mount target (e.g. '/mnt')

    # echo "P1 device: ${1}; P2 filesystemType: ${2}; P3 rootPartitionNo: ${3}; P4 mount target: ${4}"

    # initial mount, no mount options needed
    # currently only relevant for btrfs: to create subvolumes
    echo "mount ${1}${3} ${4}"
    mount "${1}${3}" "${4}" # root-partition, fix, mount without mount options
    # echo "mount ${1}${3} ${mountOption} ${4}"
    # mount "${1}${3}" "${mountOption}"  "${4}" # root-partition, mount with mount options   
}

mount-partition() {                            # mounting all partitions (btrfs: subvolumes) as preparation for installation
                                                        # https://wiki.archlinux.org/title/Snapper#Configuration_of_snapper_and_mount_point
    # Parameter 1: device (e.g. '/dev/vda')
    # Parameter 2: bootMode
    # Parameter 3: filesystemType
    # Parameter 4: efiPartitionNo
    # Parameter 5: swapPartitionNo
    # Parameter 6: rootPartitionNo (e.g. '3')
    # Parameter 7: mount target (e.g. /mnt)

    # filsystem specific mount options:
    case "${3}" in
        "btrfs")
            # mount every subvolume and create related folder if necessary
            echo "Mounting all btrfs subvolumes..."
            
            echo "- mounting root subvolume to '${7}'"   # or creating mount targets for the other subvolumes will fail + can not be mounted
            for subvol in "${!btrfsSubvolLayout[@]}"; do
                if [ "${btrfsSubvolLayout[${subvol}]}" = "/" ]; then
                    if [ "${encryption}" = "true" ]; then    
                        echo "mount -o ${mountOptionBtrfs},subvol=${subvol} ${encryptionRootPath} ${7}"
                        mount -o "${mountOptionBtrfs},subvol=${subvol}" "${encryptionRootPath}" "${7}"
                    else
                        echo "mount -o ${mountOptionBtrfs},subvol=${subvol} ${1}${6} ${7}"
                        mount -o "${mountOptionBtrfs},subvol=${subvol}" "${1}${6}" "${7}"
                        #mount -o "${mountOptionBtrfs},subvol=${subvol}" "${1}${6}" "${7}${btrfsSubvolLayout[${subvol}]}"  # e.g. mount -o rw,noatime,discard=async,compress=zstd,space_cache=v2,subvol=@ /dev/vda3 /mnt/
                    fi

                    break   # no need to go through the rest of the hashtable, if root subvolume is found
                fi
            done

            echo "- creating mount targets for subvolumes, if they do not exist..."
            for subvol in "${!btrfsSubvolLayout[@]}"; do
                if [ "${subvol}" = "@" ]; then                             # special handling for root subvolume @; no need to create root folder '/'
                    continue
                fi

                if [ ! -e  "${7}${btrfsSubvolLayout[${subvol}]}" ]; then   # if mount target (folder) does NOT exist
                    echo -e "\e[0;33m    |__ mount target '${7}${btrfsSubvolLayout[${subvol}]}' does not exist, folder will be created...\e[39m" # e.g. /mnt/home
                    mkdir -p "${7}${btrfsSubvolLayout[${subvol}]}"

                    if [ "${7}${btrfsSubvolLayout[${subvol}]}" = "${7}${snapperSnapshotFolder}" ]; then   # e.g.: if /mnt/.snapshots
                        chmod -R 750 "${7}${btrfsSubvolLayout[${subvol}]}" && chown -R :wheel "${7}${btrfsSubvolLayout[${subvol}]}"
                    fi
                fi
            done

            echo "- mounting subvolumes..."
            for subvol in "${!btrfsSubvolLayout[@]}"; do
                if [ "${subvol}" = "@" ]; then                             # special handling for root subvolume @, already mounted (very first step in current function)
                    continue
                fi

                if [ "${encryption}" = "true" ]; then  
                    mount -o "${mountOptionBtrfs},subvol=${subvol}" "${encryptionRootPath}" "${7}${btrfsSubvolLayout[${subvol}]}"   # e.g. .../dev/mapper/cryptroot /mnt/home
                else
                    mount -o "${mountOptionBtrfs},subvol=${subvol}" "${1}${6}" "${7}${btrfsSubvolLayout[${subvol}]}"  # e.g. mount -o rw,noatime,discard=async,compress=zstd,space_cache=v2,subvol=@home /dev/vda3 /mnt/home
                fi
            done
        ;;

        *)
            # other filesystems
            if [ -z "${mountOptionDefault}" ]; then   # no options configured, let mount command go for it
                if [ "${encryption}" = "true" ]; then 
                    echo "mount ${encryptionRootPath} ${7}"
                    mount "${encryptionRootPath}" "${7}"
                else
                    echo "mount ${1}${6} ${7}"
                    mount "${1}${6}" "${7}"
                fi
            else
                if [ "${encryption}" = "true" ]; then 
                    echo "mount -o ${mountOptionDefault} ${encryptionRootPath} ${7}"
                    mount -o "${mountOptionDefault}" "${encryptionRootPath}" "${7}"
                else
                    echo "mount -o ${mountOptionDefault} ${1}${6} ${7}"
                    mount -o "${mountOptionDefault}" "${1}${6}" "${7}"
                fi
            fi
        ;;
    esac


    # --- SWAP
    swapon "${1}${5}"                          # swap-partition # e.g. swapon /dev/vda2


    # --- EFI
    if [ "${2}" = "Uefi" ]; then               # bootMode: Uefi
        mkdir -p "${7}${pathEfi}"              # e.g. /mnt/efi or /mnt/boot/efi
        mount "${1}${4}" "${7}${pathEfi}"      # EFI-partition # e.g. mount /dev/vda1 /mnt/efi
    fi
}

create-btrfsSubvolume() {             # https://wiki.archlinux.org/title/Btrfs#Subvolumes
    # Parameter 1: mount target of root subvolume (e.g. /mnt)

    # want the root subvolume (mount point '/'') being the first (-> ID 256) # actually not necessary, just for looks:
    for subvol in "${!btrfsSubvolLayout[@]}"; do
        if [ "${btrfsSubvolLayout[${subvol}]}" = "/" ] && [ ! -e "${1}/${subvol}" ]; then   # if root subvolume NOT already present (should be the case here)
            echo "|__ creating subvolume '${subvol}'..."
            btrfs subvolume create "${1}/${subvol}"                                         # e.g.: btrfs subvolume create "/mnt/@"
            break                                                                           # not necessary to search further
        fi
    done

    # creating the other subvolumes according to the configured layout:
    for subvol in "${!btrfsSubvolLayout[@]}"; do
        if [ ! -e "${1}/${subvol}" ]; then                                                  # if subvolume NOT already present
            echo "|__ creating subvolume '${subvol}'..."
            sudo btrfs subvolume create "${1}/${subvol}"
        else
            echo -e "\e[0;33m|__ Subvolume '${1}/${subvol}' already present\e[39m"
        fi
    done
}

create-fstab() {   # function not used; btrfs subvolumes get mounted and then genfstab does the job
    #if [ "${filesystemType}" = "btrfs" ] && [ "${deviceType}" = "ssd" ]; then
    if [ "${filesystemType}" = "btrfs" ]; then
        fstabPath="/mnt/etc/fstab"   # "${fstabPath}"
        #fstabPath="/etc/fstab"      # "${fstabPath}"

        # ### Bios + Uefi

        #touch "${fstabPath}"
        #echo "# <file system> <dir> <type> <options> <dump> <pass>" > "${fstabPath}"   # fstab with inital comments already available

        # --- root partition              
        uuid=$(lsblk -n -o UUID "/dev/${deviceName}${rootPartitionNo}" | xargs)
        echo "${uuid}"

        echo -e "\n# /dev/${deviceName}${rootPartitionNo} LABEL=${partitionLabelRoot}" >> "${fstabPath}"
        create-fstab4BtrfsRootPartition "${fstabPath}" "${uuid}" "/mnt"  # e.g.: # UUID=656d357b-c3e8-4ae2-8122-1675c9e08edc / btrfs subvol=/@,noatime,discard=async,compress=zstd,space_cache=v2 0 0

        # --- swap partition
        uuid=$(lsblk -n -o UUID "/dev/${deviceName}${swapPartitionNo}" | xargs)
        echo -e "\n# /dev/${deviceName}${swapPartitionNo} (swap)" >> "${fstabPath}"
        echo "UUID=${uuid} none swap defaults 0 0" >> "${fstabPath}"                     # e.g.: UUID=656d357b-c3e8-4ae2-8122-1675c9e08edc none swap defaults 0 0


        # ### Uefi only --- EFI-Partition
        if [ "${bootMode}" = "Uefi" ]; then
            uuid=$(lsblk -n -o UUID "/dev/${deviceName}${efiPartitionNo}" | xargs)
            echo -e "\n# /dev/${deviceName}${efiPartitionNo} LABEL=${partitionLabelEfi}" >> "${fstabPath}"
            echo "UUID=${uuid} ${pathEfi} vfat defaults,noatime 0 2" >> "${fstabPath}"   # e.g. UUID=DE99-988D /efi vfat defaults,noatime 0 2
        fi

    else   # if not btrfs with ssd
        genfstab -U /mnt >> "${fstabPath}"
    fi
}

create-fstab4BtrfsRootPartition() {   # function not used; btrfs subvolumes get mounted and the genfstab does the job
    # Parameter 1: fstabPath (including /mnt)
    # Parameter 2: uuid
    # Parameter 3: mountpoint   # e.g. /mnt

    local mountPoint="${3}"

    get-rootSubvolumeName   # function reads from 'btrfsSubvolLayout' and sets current value for variable 'rootSubvolumeName' # e.g. '@'
    echo "Want to make sure, that btrfs root subvolume '${rootSubvolumeName}' is the first entry in fstab:"   # justs for the looks
    echo "UUID=${2} / btrfs ${mountOptionBtrfs},subvol=/${rootSubvolumeName} 0 0" | sudo tee -a "${1}"

    echo -e "\n*** Creating fstab entries for root partition with btrfs subvolumes"
    for subvol in "${!btrfsSubvolLayout[@]}"; do
        subvolInFstab='false'
        mountPointInFstab='false'

        echo "|__ creating entry for subvolume '${subvol}' with mount point '${btrfsSubvolLayout[${subvol}]}'..."

        if [ ! -e  "${mountPoint}${btrfsSubvolLayout[${subvol}]}" ]; then       # if mount target (folder) NOT existing
            echo -e "\e[0;33m    |__ mount target '${mountPoint}${btrfsSubvolLayout[${subvol}]}' does not exist, folder will be created...\e[39m"
            sudo mkdir -p "${mountPoint}${btrfsSubvolLayout[${subvol}]}"
        fi

        if [[ $(grep "subvol=/${subvol}," "${1}") ]]; then                      # if entry for options (e.g. ...'subvol=/@,'...) already present in fstab
            echo -e "\e[0;33m    |__ entry for subvolume '${subvol}' already present, check and correct if necessary\e[39m"
            subvolInFstab='true'
        fi

        if [[ $(grep -E " +${btrfsSubvolLayout[${subvol}]} +" "${1}") ]]; then  # if mount target (e.g. for '/') already present in fstab
            echo -e "\e[0;33m    |__ mount target '${btrfsSubvolLayout[${subvol}]}' already present, will not create entry '${subvol}' (again), check and correct if necessary\e[39m"
            mountPointInFstab='true'
        fi

        if [ "${subvolInFstab}" = 'false' ] && [ "${mountPointInFstab}" = 'false' ]; then   # if not already present create entry for subvolume in fstab
            # e.g.: UUID=656d357b-... / btrfs subvol=/@,noatime,discard=async,compress=zstd,space_cache=v2 0 0
            echo "UUID=${2} ${btrfsSubvolLayout[${subvol}]} btrfs ${mountOptionBtrfs},subvol=/${subvol} 0 0" | sudo tee -a "${1}"
        fi
    done
}

set-btrfsDefaultSubvolume() {
    # Parameter 1: path   # e.g. /mnt or /

    get-rootSubvolumeName   # function reads from 'btrfsSubvolLayout' and sets current value for variable 'rootSubvolumeName' # e.g. '@'

    if [ -d "${1}" ]; then
        # e.g.: ID 256 gen 7 top level 5 path @   # rootSubvolumeName: '@''
        rootSubvolumeID=$(btrfs subvolume list "${1}" | grep -w "${rootSubvolumeName}" | cut -d ' ' -f 2 | xargs)  # e.g. 256

        if [ -n "${rootSubvolumeID}" ]; then
            btrfs subvolume set-default "${rootSubvolumeID}" "${1}" # e.g.: btrfs subvolume set-default "256" /mnt
        else
            echo -e"\e[0;31m!!! Could not set default btrfs subvolume !!!\e[39m"
            echo "Trying to set ID '256' as default subvolume (root subvolume @)..."
            btrfs subvolume set-default 256 "${1}"
        fi
    else
        echo -e"\e[0;31m!!! function set-btrfsDefaultSubvolume(): Given path does not exist !!!\e[39m"
    fi
}

get-rootSubvolumeName() {
    for subvol in "${!btrfsSubvolLayout[@]}"; do
        if [ "${btrfsSubvolLayout[${subvol}]}" = "/" ]; then    # if root subvolume (mount target '/')
            rootSubvolumeName="${subvol}"
            echo "rootSubvolumeName: '${rootSubvolumeName}'"
            break                                               # not necessary to search further
        fi
    done
}

modify-fstab() {   
    # Parameter 1: target file    # e.g. /mnt/etc/fstab

    if [ "${filesystemType}" = "btrfs" ]; then   # e.g.: btrfs: genfstab adds ...,subvolid=XXX,... to the mount options, which we do not want with regard to snapshots
        sed -i -e 's/,subvolid=[0-9][0-9][0-9]//' "${1}"
    fi
}

config-snapper() {   # should work after finished install + reboot, but not in chroot-environment (and when no config for root + subvol .snapshots # TODO: !! not tested !! )
    # https://wiki.archlinux.org/title/Snapper

    # Parameter 1: name for the config      (e.g. "root" ("${snapperConfigName_root}"))
    # Parameter 2: path to the subvolume    (e.g. '/' for the path to root subvolume)

    local configName="${1}"
    local pathToSubvolume="${2}"

    pacman -Sy --needed --noconfirm snapper inotify-tools           # just to be sure, should already be installed (if 'install-additionalPackages' was called in a step before)
    pacman -S --needed --noconfirm snap-pac                         # Pacman hooks that use snapper to create pre/post btrfs snapshots like openSUSE's YaST
    if [ "${bootloader}" = "grub" ]; then pacman -S --needed --noconfirm grub-btrfs; fi # Include btrfs snapshots in GRUB boot options # just to be sure, should already be installed (if 'install-additionalPackages' was called in a step before)

    snapper -c "${configName}" create-config "${pathToSubvolume}"   # among others creates a subvolume at "/path/to/subvolume/.snapshots" (which should already exist when using the startconfig in 'btrfsSubvolLayout')

    for snapperConfKey in "${!snapperSnapshotConf[@]}"; do          # configuring the snapper config '$configName'
        snapper -c "${configName}" set-config "${snapperConfKey}=${snapperSnapshotConf[${snapperConfKey}]}"   # e.g.: snapper -c root set-config "ALLOW_GROUPS=wheel"
    done

    #systemctl enable snapper-timeline.timer                        # I do not want timeline snapshots; see 'snap-pac' # TODO: config option for creating timeline snapshot (too)
    systemctl enable snapper-cleanup.timer                          # just to be sure, should also be enabled later when calling 'enable-service' # periodically clean up older snapshots
    if [ "${bootloader}" = "grub" ]; then systemctl enable grub-btrfsd.service; fi  # Include btrfs snapshots in GRUB boot options # just to be sure # Regenerate grub-btrfs.cfg
}

config-snapperLiveEnv() {   # when booted in live environment
    # https://wiki.archlinux.org/title/Snapper
    # https://wiki.archlinux.org/title/Snapper#Configuration_of_snapper_and_mount_point

    # Parameter 1: name for the config                      (e.g. "root" ("${snapperConfigName_root}"))
    # Parameter 2: current (temp.) path to the subvolume    (e.g. '/mnt' for the path to root subvolume)
    # Parameter 3: path to the subvolume ("real" system)    (e.g. '/' for the path to root subvolume)

    local configName="${1}"
    local pathToSubvolume_tmp="${2}"
    local pathToSubvolume_real="${3}"

    # install needed packages in live environment:
    pacman -Sy --needed --noconfirm snapper inotify-tools               # this is just for/in Live Environment # 'strListAdditionalPkg' already contains/installed the needed packages (snapper inotify-tools snap-pac grub-btrfs)

    # unmount subvolume for snapshots (-> 'btrfsSubvolLayout')
    umount "${pathToSubvolume_tmp}${snapperSnapshotFolder}"             # e.g. /mnt/.snapshots # https://wiki.archlinux.org/title/Snapper#Configuration_of_snapper_and_mount_point

    # delete the ''.snaphots' folder (or the snapper ... creat-config ... in next step fails)
    rm -rf "${pathToSubvolume_tmp}${snapperSnapshotFolder}"             # e.g. '/mnt/.snapshots' # 'snapper ... create-config ...' wants to create the snapshot folder and fails if already present

    # create snapper config file
    snapper -c "${configName}" create-config "${pathToSubvolume_tmp}"   # e.g. snapper -c root create-config /mnt # (besides config files) creates a subvolume '.snapshots' at "/path/to/subvolume" 
                                                                        #                                                                  (which should already exist when using the startconfig in 'btrfsSubvolLayout')
    # remove the btrfs subvolume '.snapshots' (and the folder /mnt/.snapshots); wo already have a subvolume e.g '@snapshots' (-> 'btrfsSubvolLayout')
    rm -rf "${pathToSubvolume_tmp}${snapperSnapshotFolder}"

    # ... that means we (only) have to create the folder again (e.g. /mnt/.snapshots) and give it again the access-rights + owner (as initially in function 'mount-partition'):
    mkdir "${pathToSubvolume_tmp}${snapperSnapshotFolder}"
    chmod -R 750 "${pathToSubvolume_tmp}${snapperSnapshotFolder}" && chown -R :wheel "${pathToSubvolume_tmp}${snapperSnapshotFolder}"
    # mount -o subvol=@snapshots /dev/vda3 /mnt/.snapshots              # not necessary to mount again, everything mounted beyond '/mnt' will be unmounted in the next (last) step anyway

    for snapperConfKey in "${!snapperSnapshotConf[@]}"; do              # configuring the snapper config '$configName'
        snapper -c "${configName}" set-config "${snapperConfKey}=${snapperSnapshotConf[${snapperConfKey}]}"   # e.g.: snapper -c root set-config "ALLOW_GROUPS=wheel"
    done

    # correct config for 'configName': 'pathToSubvolume_tmp' to 'pathToSubvolume_real'   # e.g. '/mnt' to '/' in "/etc/snapper/configs/${configName}"
    sed -i "s|${pathToSubvolume_tmp}|${pathToSubvolume_real}|g" "/etc/snapper/configs/${configName}"   # e.g.: sed -i "s|/mnt|/|g" /etc/snapper/configs/root

    # copy the (corrected) snapper config files created in the Live Environment to their place in the mounted root subvolume
    mkdir -p "${pathToSubvolume_tmp}/etc/snapper/configs" && cp "/etc/snapper/configs/${configName}" "${pathToSubvolume_tmp}/etc/snapper/configs/"
    mkdir -p "${pathToSubvolume_tmp}/etc/conf.d" && cp "/etc/conf.d/snapper" "${pathToSubvolume_tmp}/etc/conf.d/"

    # 'arrService' should alerady contain these services (for "real" system):
    # #systemctl enable snapper-timeline.timer                          # I do not want timeline snapshots; see 'snap-pac' # TODO: config option for creating timeline snapshot (too)
    #systemctl enable snapper-cleanup.timer                             # just to be sure, should also be enabled later when calling 'enable-service' # periodically clean up older snapshots
    #if [ "${bootloader}" = "grub" ]; then systemctl enable grub-btrfsd.service; fi  # just to be sure # Regenerate grub-btrfs.cfg
}

modify-locales() {
    # Parameter 1: string with the items, seperated by space # Problem: items itsels partially have spaces inside itself (e.g. "en_US.UTF-8 UTF-8") -> no good dilimeter available
    # Parameter 2: path to the file in which the substitution will take place (should be "/etc/locale.gen")

    # uncomments needed locales in file ${2} (should be "/etc/locale.gen"):
    for locale in "${arrLocalegen[@]}"; do                   # not using Parameter 1: (see above), but directly the array specified in the config file
        sed -i "s|#${locale}|${locale}|g" "${2}"
    done
}

set-timezone() {
    # Parameter 1: timezone
    # Parameter 2: localtime file (should be /etc/localtime)

    echo "- set timezone (/etc/localtime)"
    ln -sf /usr/share/zoneinfo/"${1}" "${2}" # Set the time zone
    echo "- running hwclock to generate /etc/adjtime"
    hwclock --systohc 
}

set-locales() {
    echo "- uncomment needed locales in '/etc/locale.gen'"
    modify-locales "${arrLocalegen[*]}" /etc/locale.gen             # uncomment needed locales in "/etc/locale.gen"
    echo "- generate the locales"
    locale-gen                                                      # Generate the locales
    echo "- creating the '/etc/locale.conf' file and setting the LANG variable"
    echo "LANG=${defaultLangPreferred}" >> /etc/locale.conf         # set the LANG variable   # localectl --no-convert set-keymap de-latin1
    echo "- make settings for the console keyboard layout persistent (/etc/vconsole.conf)"
    echo "KEYMAP=${consoleKeyboardLayout}" >> /etc/vconsole.conf    # make settings for the console keyboard layout persistent
}

config-network() {
    echo "- setting hostname (/etc/hostname)"
    echo "${myHostname}" >> /etc/hostname                     # Create / config the hostname file
    echo "- create + config '/etc/hosts'"
    {
        echo "127.0.0.1 localhost"
        echo "::1 localhost"
        echo "127.0.1.1 ${myHostname}.${myDomain} ${myHostname}"
    } >> /etc/hosts                                           # Create / config "/etc/hosts"

    echo "- installing network management software and enabling its systemd unit"
    #pacman -S --noconfirm --needed "${strListNetworkPkg}"             # installing network management software and enabling its systemd unit so that it starts at boot
    pacman -S --noconfirm --needed ${strListNetworkPkg}             # installing network management software and enabling its systemd unit so that it starts at boot
    systemctl enable NetworkManager
}

set-password() {
    # Parameter 1: userId

    echo "- changing password for '${1}' to configured initialPassword"
    #echo "${1}":password | chpasswd                          # set passwort for userId; script stops and waits for user input
    printf "${1}:%s" "${initialPassword}" | chpasswd          # set passwort for userId, using ${initialPassword} from config   # or: sudo chpasswd <<<"${1}:${initialPassword}"

    if [ "${forceChangePassword}" = "true" ]; then passwd --expire "${1}"; echo "- forcing '${1}' to change password at next login"; fi     # forces the user to change password at next login
    # chage -l "${1}"                                         # list password expiration and aging information for userId
}

create-userAccount() {
    echo "- creating account, setting configured initial password; if configured: forcing password change + adding user to group 'libvirt'"
    for userId in "${arrUserId[@]}"; do
        #useradd -m -U -s /bin/bash -p "${initialPassword}" "${userId}" # not the safe way, but password is in the config anyway... # create new user including: set initial passwort using ${initialPassword} from config
        useradd -m -U -s /bin/bash "${userId}"                          # create new user

        set-password "${userId}"
        
        if [ "${virtualization}" = "true" ]; then usermod -aG libvirt "${userId}"; fi   # add user to libvirt group
    done
}

config-sudoUser() {
    echo "- config sudo user rights"
    for userId in "${arrSudoUser[@]}"; do
        #echo "${userId} ALL=(ALL) ALL" >> "/etc/sudoers.d/sudoUser"
        usermod -aG wheel "${userId}"   # if btrfs + snapper snapshot-folder '.snapshots' gets chown :wheel (in my ansible playbook, Repo 'ansible_workstation')
    done
    echo "%wheel ALL=(ALL:ALL) ALL" >> "/etc/sudoers.d/wheel"
}

install-grafics() {
    if [ "${graficsCardInstalled}" = "true" ]; then
        echo "- installing configured grafics packages"
        #pacman -S --noconfirm --needed ${strListGraficsCardPackage}    # install packages for the grafics card
        if [ ! ${strListGraficsCardPackage} = "" ]; then pacman -S --noconfirm --needed ${strListGraficsCardPackage}; fi
        check-exitStatusLastCommand $?
    else
        echo "- NOT installing grafics card packages, because parameter ist set to 'false'"
    fi
}

install-bootloader() {
    if [ "${bootloader}" = "grub" ]; then
        echo "- installing grub"
        #pacman -S --noconfirm grub                     # grub: install
        if [ "${filesystemType}" = "btrfs" ]; then pacman -S --noconfirm grub grub-btrfs; else pacman -S --noconfirm grub; fi   # grub-btrfs

        if [ "${encryption}" = "true" ]; then 
            echo -e "\n\e[0;35m- Configuring the boot loader (encryption settings) \e[39m"
            # https://wiki.archlinux.org/title/Dm-crypt/Encrypting_an_entire_system#Configuring_the_boot_loader
            # In order to unlock the encrypted root partition at boot

            config-bootloader
        fi

# ### TEST --------------------------------------------------------------------
# echo -e "\nPress Enter to continue - chroot: fct 'install-bootloader', after 'config-bootloader'"
# read -r
# ### TEST --------------------------------------------------------------------

        if [ "${bootMode}" = "Bios" ]; then             # Bios
            echo "- ... for Bios boot mode"
            grub-install --target=i386-pc "${device}"
        else                                            # Uefi
            echo "- ... for Uefi boot mode"
            pacman -S --noconfirm efibootmgr
            grub-install --target=x86_64-efi --efi-directory="${pathEfi}" --bootloader-id="${bootloaderId}"
        fi

        echo "- creating Grub config file"
        grub-mkconfig -o "${pathGrubCfg}"               # grub: create config

# ### TEST --------------------------------------------------------------------
# echo -e "\nPress Enter to continue - chroot: end of fct 'install-bootloader'"
# read -r
# ### TEST --------------------------------------------------------------------

    fi
}

config-bootloader() {          # if $encryption = "true"
    if [ "${bootloader}" = "grub" ]; then
        local uuidRootPartiton=""
        # Note: 'rootPartitionNo' not set in chroot, uses default value '0' from config (-> e.g. '/dev/vda0')
        uuidRootPartiton=$(blkid | grep "LABEL=\"${encryptionRootName}\"" | cut -d '"' -f 2)    # /dev/vda3: UUID="32b092af-c623-4e01-853c-87725214980f" LABEL="cryptroot" TYPE="crypto_LUKS" PARTUUID="d0ba9d2d-ce65-4408-ad9e-2baf4aa11f5a"
                                                                                                # needs a label to be set in function 'format-partition'
        #uuidRootPartiton=$(blkid | grep "crypto_LUKS" | cut -d '"' -f 2)   # no label, only root partition encrypted # /dev/vda3: UUID="b68f1d17-ff77-452a-9651-ce32ca2baddf" TYPE="crypto_LUKS" PARTUUID="56eae391-fa31-4f21-92b5-9b7d69eef604"
        
        echo "uuidRootPartiton: '${uuidRootPartiton}'"
        if [ -z $(echo "${uuidRootPartiton}" | xargs) ]; then
            echo "--- blkid:"
            blkid
            echo -e "\e[0;31mUUID of root partition (NOT the mapper device !) could not be defined, please enter manually.\e[39m"
            read -r -p "Enter UUID: " uuidRootPartiton
        fi

        sed -i "s|loglevel=3 quiet|loglevel=3 quiet cryptdevice=UUID=${uuidRootPartiton}:${encryptionRootName} root=${encryptionRootPath}|g" /etc/default/grub   # GRUB_CMDLINE_LINUX_DEFAULT="loglevel=3 quiet"

        # enable booting from LUKS encrypted devices:
        sed -i 's|#GRUB_ENABLE_CRYPTODISK=y|GRUB_ENABLE_CRYPTODISK=y|g' /etc/default/grub

        # sudo grub-mkconfig -o "$pathGrubCfg"   # not necessary anymore, will be done in function 'install-bootloader' after this function ()'config-bootloader') finishes
    fi
}

config-mkinitcpio() {          # if $encryption = "true"
    # modify MODULES:
    if [ "${filesystemType}" = "btrfs" ]; then
        sed -i 's/MODULES=()/MODULES=(btrfs)/g' "${pathToMkinitcpioConf}"
    fi

    # modify HOOKS:
    sed -i -E 's/consolefont block filesystems/consolefont block encrypt filesystems/g' "${pathToMkinitcpioConf}"
}

install-additionalPackages() {
    echo "- installing configured packages: standard, print, firewall, conflicting"
    pacman -S --noconfirm --needed ${strListAdditionalPkg}

    pacman -S --noconfirm --needed ${strListAdditionalPkg_print}
    pacman -S --noconfirm --needed ${strListAdditionalPkg_firewall}
    #pacman -S --noconfirm ${strListAdditionalPkg_PowerMgmt}  # TODO: query if corresponding variable is set -> install
    yes | pacman -S ${strListAdditionalPkg_conflicting}       # install packages with known conflicts an confirm prompt-question with yes

    if [ "${virtualization}" = "true" ]; then
        # TODO: check cpu for virtualization support
        # TODO: nested virtualization

        echo "- installing additional packages for virtualization"
        pacman -S --noconfirm --needed ${strListAdditionalPkg_VM}
        # TODO: config '/etc/libvirt/libvirtd.conf' # e.g. set: unix_sock_group = "libvirt" # unix_sock_rw_perms = "0770"

        #pacmman -S -noconfirm --needed spice-vdagent   # TODO: only if the machine is a virtual machine: clipboard sharing Guest<->Host
    fi

    #pacman -S --noconfirm --needed "${strListAdditionalPkg_zsh}"   # TODO
    #echo "${zshSyntaxConf}" >> $userdir/.zshrc                     # TODO
}

enable-service() {
    echo "- enabling services ..."
    for service in "${arrService[@]}"; do
        systemctl enable "${service}"
    done
}

install-DesktopEnvironment() {
    if [ "${installDesktopEnvironment}" = "true" ]; then
        case "${desktopEnvironmentName}" in
            "Gnome")
                echo "- installing packages for Gnome + enabling gdm"
                pacman -S --noconfirm --needed ${strListBasePkg_Gnome}
                #pacman -S --noconfirm --needed gnome-extra

                systemctl enable gdm
            ;;

            *)
                echo -e "\e[0;33mdefault case, function 'install-DesktopEnvironment' - '${desktopEnvironmentName}' not available\e[39m"   # TOOD: add more desktop environments
            ;;
        esac

        echo "- installing additional packages"
        pacman -S --noconfirm --needed ${strListDesktopEnvPgk}
    else
        echo "No DesktopEnvironment will be installed because variable 'installDesktopEnvironment' is set to 'false'"
    fi
}


newFunction() {
    echo "# TODO: implement function '${FUNCNAME}'"
}
